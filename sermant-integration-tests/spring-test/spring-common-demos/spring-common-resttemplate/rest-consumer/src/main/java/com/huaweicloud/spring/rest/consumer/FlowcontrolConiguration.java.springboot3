/*
 * Copyright (C) 2022-2022 Huawei Technologies Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.huaweicloud.spring.rest.consumer;

import com.huaweicloud.spring.common.flowcontrol.handlers.RestTemplateResponseErrorHandler;

import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.BasicHttpClientConnectionManager;
import org.apache.hc.client5.http.socket.ConnectionSocketFactory;
import org.apache.hc.client5.http.socket.PlainConnectionSocketFactory;
import org.apache.hc.client5.http.ssl.NoopHostnameVerifier;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.core5.http.config.Registry;
import org.apache.hc.core5.http.config.RegistryBuilder;
import org.apache.hc.core5.ssl.SSLContexts;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.apache.hc.core5.util.Timeout;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

/**
 * 流控配置类
 *
 * @author zhouss
 * @since 2022-07-28
 */
@Configuration
public class FlowcontrolConiguration {
    private static final Logger LOGGER = LoggerFactory.getLogger(FlowcontrolConiguration.class);
    private static final Timeout TIME_OUT = Timeout.ofMinutes(5);

    @Value("${timeout}")
    private int timeout;

    /**
     * 注入请求器
     *
     * @return RestTemplate
     */
    @LoadBalanced
    @Bean
    public RestTemplate restTemplate() {
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setErrorHandler(new RestTemplateResponseErrorHandler());
        return restTemplate;
    }

    /**
     * 离群实例摘除的注入请求器
     *
     * @return RestTemplate
     */
    @LoadBalanced
    @Bean("removalRestTemplate")
    public RestTemplate removalRestTemplate() {
        RestTemplate template = new RestTemplate();
        SimpleClientHttpRequestFactory rf = (SimpleClientHttpRequestFactory) template.getRequestFactory();
        rf.setReadTimeout(timeout);
        return template;
    }

    /**
     * 注入请求器
     *
     * @return RestTemplate
     */
    @LoadBalanced
    @Bean("routerRestTemplate")
    public RestTemplate routerRestTemplate() {
        return new RestTemplate();
    }

    /**
     * 注入请求器
     *
     * @return RestTemplate
     */
    @LoadBalanced
    @Bean("gracefulRestTemplate")
    public RestTemplate gracefulRestTemplate() {
        return buildRestTemplate();
    }

    private RestTemplate buildRestTemplate() {
        RestTemplate restTemplate = null;
        try {
            restTemplate = new RestTemplate(buildHttpRequestFactory());
        } catch (KeyStoreException | NoSuchAlgorithmException | KeyManagementException e) {
            LOGGER.error("build SSL restTemplate failed!");
        }
        return restTemplate;
    }

    private HttpComponentsClientHttpRequestFactory buildHttpRequestFactory()
        throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
        TrustStrategy strategy = (x509Certificates, authType) -> true;
        SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, strategy).build();
        RequestConfig requestConfig = RequestConfig.custom()
            /*.setSocketTimeout(TIME_OUT)*/.setConnectTimeout(TIME_OUT).setConnectionRequestTimeout(TIME_OUT).build();
        HttpClientBuilder httpClientBuilder = HttpClients.custom();
        httpClientBuilder.setDefaultRequestConfig(requestConfig);
        SSLConnectionSocketFactory factory = new SSLConnectionSocketFactory(sslContext, new NoopHostnameVerifier());
        Registry<ConnectionSocketFactory> socketFactoryRegistry =
            RegistryBuilder.<ConnectionSocketFactory> create()
                .register("https", factory)
                .register("http", new PlainConnectionSocketFactory())
                .build();
        BasicHttpClientConnectionManager connectionManager = new BasicHttpClientConnectionManager(socketFactoryRegistry);
        httpClientBuilder.setConnectionManager(connectionManager);
        CloseableHttpClient httpClient = httpClientBuilder.build();
        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
        requestFactory.setHttpClient(httpClient);
        return requestFactory;
    }
}
